"""                                     Модуль 8. Серіалізація та копіювання об'єктів в Python

                        Вступ
                        
У цьому модулі ми розберемося, як передавати, шифрувати та дешифрувати потоки даних.

Розглянемо такі теми:

- Серіалізація об'єктів Python
- Серіалізація об'єктів за допомогою pickle
- Серіалізація за допомогою JSON
- Робота з таблицями CSV
- Управління порядком серіалізації
- Створення копій об'єктів
- Створення поверхневих копій об'єктів
- Управління порядком копіювання об'єктів Python

В результаті проходження модуля, ти дізнаєшся, що таке серіалізація та як дані в програмі передаються між різними 
модулями.


                        Серіалізація об'єктів в Python
                        
Серіалізація об'єктів в Python — це процес перетворення структури даних або об'єкта в потік байтів для зберігання 
або передачі. Цей потік байтів може бути збережений у файлі, переданий через мережу або навіть використаний для 
зберігання в базі даних. Ціль серіалізації — зберегти стан об'єкта так, щоб його можна було відновити в майбутньому. 
Процес відновлення стану об'єкта з серіалізованої форми називається десеріалізацією.

Завжди, коли потрібно зберегти інформацію для подальшого використання в зрозумілій комп'ютеру формі, робимо 
серіалізацію. Найочевидніший приклад — це збереження даних у текстовий файл. Ти можеш зберегти, наприклад, перелік 
витрат у текстовий файл:"""

expenses = {"hotel": 150, "breakfast": 30, "taxi": 15, "lunch": 20}

file_name = "expenses.txt"
with open(file_name, "w") as fh:
    for key, value in expenses.items():
        fh.write(f"{key}|{value}\n")

""" Цей файл буде повністю читабельним:

hotel|150
breakfast|30
taxi|15
lunch|20

Якщо потім знадобиться завантажити цей перелік назад у Python, завжди є змога це зробити:"""

file_name = "expenses.txt"
expenses = {}

with open(file_name, "r") as fh:
    raw_expenses = fh.readlines()
    for line in raw_expenses:
        key, value = line.split("|")
        expenses[key] = int(value)

print(expenses)

""" Виведення:{'hotel': 150, 'breakfast': 30, 'taxi': 15, 'lunch': 20}

У цьому примітивному прикладі ми серіалізували та десеріалізували словник expenses. Такий підхід цілком виправданий, 
особливо, якщо варто зберегти інформативний вигляд інформації.

Однак, далеко не завжди такий підхід виправданий. Зауваж, що у цьому прикладі довелося винайти свій протокол 
серіалізації. А саме:
- символ нового рядка вказує на початок нової пари ключ-значення;
- символ | розділяє ключ і значення
- значення потрібно перетворити з рядкового представлення на числову форму.

Для роботи з даними, серіалізованими за цим протоколом, необхідно буде пам'ятати про нього та розширювати протокол 
за потребою.

Можна піти іншим шляхом та скористатися одним із стандартних протоколів. За такого підходу можна зекономити, 
використовуючи готове та протестоване рішення.

Python надає декілька модулів для серіалізації, найпопулярнішими з яких є pickle і json.
- вбудований пакет pickle дозволяє працювати з вбудованими типами (словники, списки, кортежі, рядки, множини та ін.) 
і навіть з нескладними класами;
- формат JSON підтримується Python і з невеликими обмеженнями дозволяє працювати з рядками, числами, списками, 
кортежами та словниками.

Обидва ці методи мають свої переваги та обмеження. Pickle має високу гнучкість і дозволяє серіалізувати складні 
об'єкти, але може бути небезпечним при десеріалізації даних зі сторонніх джерел. JSON є більш обмеженим у типах 
даних, які можуть бути серіалізовані, але забезпечує кращу багатоплатформову сумісність і безпеку.


                        Серіалізація об'єктів Python за допомогою pickle


Для виконання серіалізації та десеріалізації об'єктів важлива швидкість, коректність і невеликий розмір пам'яті, 
який при цьому використовується, і тут найкраще підійде пакет pickle.

Модуль pickle дозволяє серіалізувати об'єкти Python у потік байтів та десеріалізувати потік байтів назад у об'єкти. 
Це виправдано та корисно для зберігання об'єктів у файлах або передачі даних через мережу.

Основна мета pickle — зберегти стан об'єкта так, щоб його можна було точно відновити пізніше і часто в іншому місці.

У пакета pickle є дві пари парних методів:


                        Упакування у byte-рядки та розпакування із byte-рядків

Метод dumps запаковує в byte-рядок об'єкт, а метод loads потім розпаковує назад з byte-рядка в об'єкт. Ці методи 
потрібні, коли ми хочемо контролювати, що робити з byte представленням, наприклад, відправити його мережею або 
прийняти з мережі."""
import pickle

# Об'єкт для серіалізації
my_data = {"key": "value", "num": 42}

# Серіалізація об'єкта в байтовий рядок
serialized_data = pickle.dumps(my_data)
# Виведе байтовий рядок
print(serialized_data)  

# Десеріалізація об'єкта з байтового рядка
deserialized_data = pickle.loads(serialized_data)
# Виведе вихідний об'єкт Python
print(deserialized_data)

""" Виведення:
b'\\x80\\x04\\x95\\x1b\\x00\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\x03key\\x94\\x8c\\x05value\\x94\\x8c\\x03num\\x94K*u.'
{'key': 'value', 'num': 42}

У цьому прикладі метод pickle.dumps(data) перетворює словник data в серіалізований байтовий рядок 
serialized_data. Далі pickle.loads(serialized_data) перетворює байтовий рядок назад в об'єкт Python, дозволяючи вам 
працювати з ним як зі звичайним словником. 


                        Упакування у файл та розпакування з файлу

Серіалізація у файл і десеріалізація з файлу дозволяють безпосередньо зберігати та відновлювати об'єкти у файловій 
системі. За це відповідають методи dump та load, що упаковують дані у файл та розпаковують із файлу відповідно.

Використання pickle.dump(data, file) зберігає об'єкт data у файлі data.pickle."""

import pickle

# Об'єкт для серіалізації
my_data = {"key": "value", "num": 100}

# Серіалізація об'єкта в файл
with open("data.pickle", "wb") as file:
    pickle.dump(my_data, file)

""" Після виконання коду ми збережемо словник **data** у файл. Тепер якщо нам знадобляться ці данні ми можемо 
виконати десеріалізацію даних з цього файлу, наприклад в іншому скрипті:"""

import pickle

# Десеріалізація об'єкта з файлу
with open('data.pickle', 'rb') as file:
    deserialized_data = pickle.load(file)

# Виведе вихідний об'єкт Python
print(deserialized_data)

""" Метод pickle.load(file) читає та відновлює об'єкт з файлу data.pickle. І ми в змінній deserialized_data 
отримаємо словник з тими ж значеннями, що і в попередньому прикладі у словника data.

{'key': 'value', 'num': 100}



"""